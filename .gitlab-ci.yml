image: docker:20.10.22
services:
  - docker:20.10.22-dind

variables:
  dev: dev
  re7: preprod
  master: prod
  api_docker_image: "$CI_REGISTRY/cour-de-cassation/juritj/api:$CI_COMMIT_BRANCH-$CI_COMMIT_SHORT_SHA"
  batch_docker_image: "$CI_REGISTRY/cour-de-cassation/juritj/batch:$CI_COMMIT_BRANCH-$CI_COMMIT_SHORT_SHA"

stages:
  - test
  - build
  - deploy

test:
  stage: test
  services:
  - docker:20.10.22
  variables:
    HTTP_PROXY: $HTTP_PROXY_DEV
    HTTPS_PROXY: $HTTPS_PROXY_DEV
  script:
    - echo $CI_JOB_TOKEN | docker login -u $CI_REGISTRY_USER --password-stdin $CI_REGISTRY
    - docker build 
        --build-arg http_proxy=$HTTP_PROXY
        --build-arg https_proxy=$HTTPS_PROXY
        --target test
        -t juritj-test .
    ##- docker run -e HTTP_PROXY=$HTTP_PROXY -e HTTPS_PROXY=$HTTPS_PROXY juritj-test npm audit
    - docker run -e HTTP_PROXY=$HTTP_PROXY -e HTTPS_PROXY=$HTTPS_PROXY juritj-test npm run format
    - docker run -e HTTP_PROXY=$HTTP_PROXY -e HTTPS_PROXY=$HTTPS_PROXY juritj-test npm run lint
    - docker run -e HTTP_PROXY=$HTTP_PROXY -e HTTPS_PROXY=$HTTPS_PROXY juritj-test npm test
    - echo 'ok'
  only:
    - master
    - re7
    - dev
  tags:
    - docker

build_api:
  stage: build
  variables:
    HTTP_PROXY: $HTTP_PROXY_DEV
    HTTPS_PROXY: $HTTPS_PROXY_DEV
  script: 
    - echo $CI_JOB_TOKEN | docker login -u $CI_REGISTRY_USER --password-stdin $CI_REGISTRY
    - docker build
        --build-arg http_proxy=$HTTP_PROXY
        --build-arg https_proxy=$HTTPS_PROXY
        --target api
        -t $api_docker_image .
    - docker push $api_docker_image
  only:
    - master
    - re7
    - dev
  tags:
    - docker

build_batch:
  stage: build
  variables:
    HTTP_PROXY: $HTTP_PROXY_DEV
    HTTPS_PROXY: $HTTPS_PROXY_DEV
  script:
    - echo $CI_JOB_TOKEN | docker login -u $CI_REGISTRY_USER --password-stdin $CI_REGISTRY
    - docker build
        --build-arg http_proxy=$HTTP_PROXY
        --build-arg https_proxy=$HTTPS_PROXY
        --target batch
        -t $batch_docker_image .
    - docker push $batch_docker_image
  only:
    - master
    - re7
    - dev
  tags:
    - docker

deploy_juritj:
  stage: deploy
  image: alpine/ansible:latest
  variables:
    DOLLAR: $$
  script:
    - inventaire=$(eval "echo \$$CI_COMMIT_BRANCH")
    - mkdir /root/.ssh
    - cat $SSH_KEY > /root/.ssh/id_rsa
    - cat $KNOWN_HOSTS > /root/.ssh/known_hosts
    - chmod 600 /root/.ssh/id_rsa
    - chmod 600 /root/.ssh/known_hosts
    - ansible-playbook -e juritj_api_image=$api_docker_image -e juritj_batch_image=$batch_docker_image -i ansible/inventory/$inventaire.yml ansible/deploy_juritj.yml --vault-password-file=$ANSIBLE_VAULT_PASS
  rules:
    - if: $CI_COMMIT_BRANCH == "master" 
      when: manual
    - if: $CI_COMMIT_BRANCH == "dev" || $CI_COMMIT_BRANCH == "re7"
      when: on_success
  tags:
    - docker
  dependencies:
    - build_api
    - build_batch
