image: docker:20.10.22
services:
  - docker:20.10.22-dind

stages:
  - test
  - build
  - deploy

test:
  stage: test
  services:
  - docker:20.10.22
  variables:
    HTTP_PROXY: $HTTP_PROXY_DEV
    HTTPS_PROXY: $HTTPS_PROXY_DEV
  script:
    - echo $CI_JOB_TOKEN | docker login -u $CI_REGISTRY_USER --password-stdin $CI_REGISTRY
    - docker build 
        --build-arg http_proxy=$HTTP_PROXY
        --build-arg https_proxy=$HTTPS_PROXY
        --target test
        -t juritj-test .
    #- docker run -e HTTP_PROXY=$HTTP_PROXY -e HTTPS_PROXY=$HTTPS_PROXY juritj-test npm audit
    - docker run -e HTTP_PROXY=$HTTP_PROXY -e HTTPS_PROXY=$HTTPS_PROXY juritj-test npm run format
    - docker run -e HTTP_PROXY=$HTTP_PROXY -e HTTPS_PROXY=$HTTPS_PROXY juritj-test npm run lint
    - docker run -e HTTP_PROXY=$HTTP_PROXY -e HTTPS_PROXY=$HTTPS_PROXY juritj-test npm test
    - echo 'ok'
  only:
    - ajout_ansible
    - master
    - re7
    - dev
  tags:
    - docker

build_api:
  stage: build
  variables:
    HTTP_PROXY: $HTTP_PROXY_DEV
    HTTPS_PROXY: $HTTPS_PROXY_DEV
  script: 
    - echo $CI_JOB_TOKEN | docker login -u $CI_REGISTRY_USER --password-stdin $CI_REGISTRY
    - docker build
        --build-arg http_proxy=$HTTP_PROXY
        --build-arg https_proxy=$HTTPS_PROXY
        --target api
        -t $CI_REGISTRY/cour-de-cassation/juritj:$CI_COMMIT_BRANCH-$CI_COMMIT_SHORT_SHA-api .
    - docker push $CI_REGISTRY/cour-de-cassation/juritj:$CI_COMMIT_BRANCH-$CI_COMMIT_SHORT_SHA-api
  only:
    - ajout_ansible
    - master
    - re7
    - dev
  tags:
    - docker

build_batch:
  stage: build
  variables:
    HTTP_PROXY: $HTTP_PROXY_DEV
    HTTPS_PROXY: $HTTPS_PROXY_DEV
  script:
    - echo $CI_JOB_TOKEN | docker login -u $CI_REGISTRY_USER --password-stdin $CI_REGISTRY
    - docker build
        --build-arg http_proxy=$HTTP_PROXY
        --build-arg https_proxy=$HTTPS_PROXY
        --target batch
        -t $CI_REGISTRY/cour-de-cassation/juritj:$CI_COMMIT_BRANCH-$CI_COMMIT_SHORT_SHA-batch .
    - docker push $CI_REGISTRY/cour-de-cassation/juritj:$CI_COMMIT_BRANCH-$CI_COMMIT_SHORT_SHA-batch
  only:
    - ajout_ansible
    - master
    - re7
    - dev
  tags:
    - docker

deploy_juritj_dev:
  stage: deploy
  image: alpine/ansible:latest
  variables:
    DOLLAR: $$
  script:
    - echo $ANSIBLE_VAULT_PASS > vault-pass.txt
    - mkdir /root/.ssh
    - cat $SSH_KEY > /root/.ssh/id_rsa
    - cat $KNOWN_HOSTS > /root/.ssh/known_hosts
    - chmod 600 /root/.ssh/id_rsa
    - chmod 600 /root/.ssh/known_hosts
    - ansible-playbook -i ansible/inventory/dev.yml ansible/deploy_juritj.yml --vault-password-file=vault-pass.txt
  only:
    - ajout_ansible
    - dev
  tags:
    - docker
  dependencies:
    - build_api
    - build_batch

deploy_juritj_preprod:
  stage: deploy
  image: alpine/ansible:latest
  variables:
    DOLLAR: $$
  script:
    - echo $ANSIBLE_VAULT_PASS > vault-pass.txt
    - mkdir /root/.ssh
    - cat $SSH_KEY > /root/.ssh/id_rsa
    - cat $KNOWN_HOSTS > /root/.ssh/known_hosts
    - chmod 600 /root/.ssh/id_rsa
    - chmod 600 /root/.ssh/known_hosts
    - echo $ANSIBLE_VAULT_PASS > vault-pass.txt
    - ansible-playbook -i ansible/inventory/preprod.yml ansible/deploy_juritj.yml --vault-password-file=vault-pass.txt
  rules:
    - if: $CI_COMMIT_BRANCH == "ajout_ansible" || $CI_COMMIT_BRANCH == "re7"
      when: manual
  tags:
    - docker
  dependencies:
    - build_api
    - build_batch

deploy_juritj_prod:
  stage: deploy
  image: alpine/ansible:latest
  variables:
    DOLLAR: $$
  script:
    - echo $ANSIBLE_VAULT_PASS > vault-pass.txt
    - mkdir /root/.ssh
    - cat $SSH_KEY > /root/.ssh/id_rsa
    - cat $KNOWN_HOSTS > /root/.ssh/known_hosts
    - chmod 600 /root/.ssh/id_rsa
    - chmod 600 /root/.ssh/known_hosts
    - echo $ANSIBLE_VAULT_PASS > vault-pass.txt
    - ansible-playbook -i ansible/inventory/prod.yml ansible/deploy_juritj.yml --vault-password-file=vault-pass.txt
  rules:
    - if: $CI_COMMIT_BRANCH == "ajout_ansible" || $CI_COMMIT_BRANCH == "master"
      when: manual
  tags:
    - docker
  dependencies:
    - build_api
    - build_batch
