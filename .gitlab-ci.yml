image: docker:20.10.22
services:
  - docker:20.10.22-dind

stages:
  - test
  - build
  - deploy

test:
  stage: test
  services:
  - docker:20.10.22
  variables:
    HTTP_PROXY: $HTTP_PROXY
    HTTPS_PROXY: $HTTPS_PROXY
    JURITJ_DOC_LOGIN: $JURITJ_DOC_LOGIN
    JURITJ_DOC_PASSWORD: $JURITJ_DOC_PASSWORD
    MINIO_USER: $MINIO_USER
    MINIO_PASSWORD: $MINIO_PASSWORD
    JURITJ_S3_ACCESS_KEY: $JURITJ_S3_ACCESS_KEY
    JURITJ_S3_SECRET_KEY: $JURITJ_S3_SECRET_KEY
    JURITJ_S3_URL: $JURITJ_S3_URL
    JURITJ_S3_REGION: $JURITJ_S3_REGION
    JURITJ_S3_BUCKET_NAME_RAW: $JURITJ_S3_BUCKET_NAME_RAW
    JURITJ_S3_BUCKET_NAME_NORMALIZED: $JURITJ_S3_BUCKET_NAME_NORMALIZED
    JURITJ_DBSDER_API_KEY: $JURITJ_DBSDER_API_KEY
    JURITJ_DBSDER_API_URL: $JURITJ_DBSDER_API_URL
    JURITJ_NO_COLOR: $JURITJ_NO_COLOR

  script:
    - echo $CI_JOB_TOKEN | docker login -u $CI_REGISTRY_USER --password-stdin $CI_REGISTRY
    - docker build 
        --build-arg http_proxy=$HTTP_PROXY
        --build-arg https_proxy=$HTTPS_PROXY
        --target test
        -t juritj-test .
    #- docker run -e HTTP_PROXY=$HTTP_PROXY -e HTTPS_PROXY=$HTTPS_PROXY juritj-test npm audit
    - docker run -e HTTP_PROXY=$HTTP_PROXY -e HTTPS_PROXY=$HTTPS_PROXY juritj-test npm run format
    - docker run -e HTTP_PROXY=$HTTP_PROXY -e HTTPS_PROXY=$HTTPS_PROXY juritj-test npm run lint
    - docker run -e HTTP_PROXY=$HTTP_PROXY -e HTTPS_PROXY=$HTTPS_PROXY juritj-test npm test
    - echo 'ok'
  only:
    - master
    - re7
    - dev
  tags:
    - docker

build_api:
  stage: build
  needs: ["test"]
  variables:
    HTTP_PROXY: $HTTP_PROXY
    HTTPS_PROXY: $HTTPS_PROXY
  script: 
    - echo $CI_JOB_TOKEN | docker login -u $CI_REGISTRY_USER --password-stdin $CI_REGISTRY
    - docker build
        --build-arg http_proxy=$HTTP_PROXY
        --build-arg https_proxy=$HTTPS_PROXY
        --target api
        -t $CI_REGISTRY/cour-de-cassation/juritj:$CI_COMMIT_BRANCH-$CI_COMMIT_SHORT_SHA-api .
    - docker push $CI_REGISTRY/cour-de-cassation/juritj:$CI_COMMIT_BRANCH-$CI_COMMIT_SHORT_SHA-api
  only:
    - master
    - re7
    - dev
  tags:
    - docker

build_batch:
  stage: build
  needs: ["test"]
  variables:
    HTTP_PROXY: $HTTP_PROXY
    HTTPS_PROXY: $HTTPS_PROXY
  script:
    - echo $CI_JOB_TOKEN | docker login -u $CI_REGISTRY_USER --password-stdin $CI_REGISTRY
    - docker build
        --build-arg http_proxy=http://10.16.117.210:3128
        --build-arg https_proxy=http://10.16.117.210:3128
        --target batch
        -t $CI_REGISTRY/cour-de-cassation/juritj:$CI_COMMIT_BRANCH-$CI_COMMIT_SHORT_SHA-batch .
    - docker push $CI_REGISTRY/cour-de-cassation/juritj:$CI_COMMIT_BRANCH-$CI_COMMIT_SHORT_SHA-batch
  only:
    - master
    - re7
    - dev
  tags:
    - docker

deploy_api:
  stage: deploy
  needs: ["build_api"]
  variables:
    JURITJ_DOC_LOGIN: $JURITJ_DOC_LOGIN
    JURITJ_DOC_PASSWORD: $JURITJ_DOC_PASSWORD
    MINIO_USER: $MINIO_USER
    MINIO_PASSWORD: $MINIO_PASSWORD
    JURITJ_S3_ACCESS_KEY: $JURITJ_S3_ACCESS_KEY
    JURITJ_S3_SECRET_KEY: $JURITJ_S3_SECRET_KEY
    JURITJ_S3_URL: $JURITJ_S3_URL
    JURITJ_S3_REGION: $JURITJ_S3_REGION
    JURITJ_S3_BUCKET_NAME_RAW: $JURITJ_S3_BUCKET_NAME_RAW
    JURITJ_S3_BUCKET_NAME_NORMALIZED: $JURITJ_S3_BUCKET_NAME_NORMALIZED
    JURITJ_SERVER_KEY: $JURITJ_SERVER_KEY
    JURITJ_SERVER_KEY_PASSPHRASE: $JURITJ_SERVER_KEY_PASSPHRASE
    JURITJ_SERVER_CERT: $JURITJ_SERVER_CERT
    JURITJ_SERVER_CA_CERT: $JURITJ_SERVER_CA_CERT
    JURITJ_WINCI_CA_CERT: $JURITJ_WINCI_CA_CERT
    JURITJ_AUTO_SIGNED_CA_CERT: $JURITJ_AUTO_SIGNED_CA_CERT
    JURITJ_CURRENT_ENV: $JURITJ_CURRENT_ENV
    DOLLAR: $$
  script:
<<<<<<< HEAD
    - envsubst < .deploys/deploy_namespace.yaml | kubectl --kubeconfig=/home/gitlab-runner/.kube/$CI_COMMIT_BRANCH apply -f -
    - envsubst < .deploys/deploy_api.yaml | kubectl --kubeconfig=/home/gitlab-runner/.kube/$CI_COMMIT_BRANCH apply -f -
    - envsubst < .deploys/deploy_bucket.yaml | kubectl --kubeconfig=/home/gitlab-runner/.kube/$CI_COMMIT_BRANCH apply -f -
    - envsubst < .deploys/deploy_ingress.yaml | kubectl --kubeconfig=/home/gitlab-runner/.kube/$CI_COMMIT_BRANCH apply -f -
=======
    - echo $ANSIBLE_VAULT_PASS > vault-pass.txt
    - mkdir /root/.ssh
    - cat $SSH_KEY > /root/.ssh/id_rsa
    - cat $KNOWN_HOSTS > /root/.ssh/known_hosts
    - pwd
    - chmod 600 /root/.ssh/id_rsa
    - chmod 600 /root/.ssh/known_hosts
    - cat /root/.ssh/known_hosts
    - ls -la /root/.ssh
    - cat /root/.ssh/id_rsa
    - ssh-keygen -l -f /root/.ssh/id_rsa
    #- ssh -i /root/.ssh/id_rsa iliasaaguida@10.16.117.211
    - ANSIBLE_DEBUG=true ansible-playbook -vvvv -i ansible/inventory/dev.yml ansible/deploy_juritj.yml --vault-password-file=vault-pass.txt
  only:
    - ajout_ansible
    - dev
  tags:
    - docker
  dependencies:
    - build_api
    - build_batch

deploy_juritj_preprod:
  stage: deploy
  image: alpine/ansible:latest
  variables:
    DOLLAR: $$
  script:
    - echo $ANSIBLE_VAULT_PASS > vault-pass.txt
    - ansible-playbook -i ansible/inventory/preprod.yml ansible/deploy_juritj.yml --vault-password-file=vault-pass.txt
>>>>>>> c2645e7 (try ssh without ansible)
  rules:
    - if: $CI_COMMIT_BRANCH == "dev" || $CI_COMMIT_BRANCH == "re7"
      when: on_success
    - if: $CI_COMMIT_BRANCH == "master"
      when: manual
  tags:
    - shell

deploy_batch:
  stage: deploy
  needs: ["build_batch"]
  variables:
    MINIO_USER: $MINIO_USER
    MINIO_PASSWORD: $MINIO_PASSWORD
    JURITJ_S3_ACCESS_KEY: $JURITJ_S3_ACCESS_KEY
    JURITJ_S3_SECRET_KEY: $JURITJ_S3_SECRET_KEY
    JURITJ_S3_URL: $JURITJ_S3_URL
    JURITJ_S3_REGION: $JURITJ_S3_REGION
    JURITJ_S3_BUCKET_NAME_RAW: $JURITJ_S3_BUCKET_NAME_RAW
    JURITJ_S3_BUCKET_NAME_NORMALIZED: $JURITJ_S3_BUCKET_NAME_NORMALIZED
    JURITJ_DBSDER_API_KEY: $JURITJ_DBSDER_API_KEY
    JURITJ_DBSDER_API_URL: $JURITJ_DBSDER_API_URL
    JURITJ_NORMALIZATION_BATCH_SCHEDULE: $JURITJ_NORMALIZATION_BATCH_SCHEDULE

    DOLLAR: $$
  script:
    - envsubst < .deploys/deploy_batch.yaml | kubectl --kubeconfig=/home/gitlab-runner/.kube/$CI_COMMIT_BRANCH apply -f -
  rules:
    - if: $CI_COMMIT_BRANCH == "dev" || $CI_COMMIT_BRANCH == "re7"
      when: on_success
    - if: $CI_COMMIT_BRANCH == "master"
      when: manual
  tags:
    - shell
